#!/usr/bin/env python
# vim: fileencoding=utf-8 tw=100 expandtab ts=4 sw=4 :
#
# (c) 2016 Vincent Loy
import argparse
import base64
import socketserver
import threading
import webbrowser
from http.server import SimpleHTTPRequestHandler

import codecs
import sys
import bottlenose
from urllib.request import pathname2url  # Python 3.x
import os
import json
from multiprocessing import Process
from os import getenv

from lxml.objectify import StringElement
from amazon.api import AmazonAPI
from slugify import Slugify

PORT = 8898

VALID_SEARCH_INDEX = [
    'All', 'Apparel', 'Appliances', 'ArtsAndCrafts', 'Automotive', 'Baby', 'Beauty', 'Blended',
    'Books', 'Classical', 'Collectibles', 'DVD', 'DigitalMusic', 'Electronics', 'GiftCards',
    'GourmetFood', 'Grocery', 'HealthPersonalCare', 'HomeGarden', 'Industrial', 'Jewelry',
    'KindleStore', 'Kitchen', 'LawnAndGarden', 'Marketplace', 'MP3Downloads', 'Magazines',
    'Miscellaneous', 'Music', 'MusicTracks', 'MusicalInstruments', 'MobileApps', 'OfficeProducts',
    'OutdoorLiving', 'PCHardware', 'PetSupplies', 'Photo', 'Shoes', 'Software', 'SportingGoods',
    'Tools', 'Toys', 'UnboxVideo', 'VHS', 'Video', 'VideoGames', 'Watches', 'Wireless',
    'WirelessAccessories',
]

PRODUCT_PROPERTIES = [
    'asin', 'author', 'authors', 'binding', 'brand', 'color', 'creators', 'ean',
    'edition', 'editorial_review', 'editorial_reviews', 'eisbn', 'features', 'isbn', 'label',
    'large_image_url', 'list_price', 'manufacturer', 'medium_image_url', 'model', 'mpn', 'offer_url',
    'pages', 'parent_asin', 'part_number', 'price_and_currency', 'publisher',
    'region', 'reviews', 'sales_rank', 'sku', 'small_image_url', 'tiny_image_url',
    'title', 'upc',
]


class Voon(object):
    def __init__(self, args):
        self.args = args
        self.assoc_tag = getenv('AMAZON_ASSOC_TAG') if getenv('AMAZON_ASSOC_TAG') else ''
        self.data = []

    def _init_amazon_api(self):
        self.amazon = AmazonAPI(
            getenv('AMAZON_ACCESS_KEY'),
            getenv('AMAZON_SECRET_KEY'),
            getenv('AMAZON_ASSOC_TAG'),
            region=self.args['region'],
        )

    def _chunks(self, l, n):
        for i in range(0, len(l), n):
            yield l[i:i+n]

    def _create_file(self, file_name):
        with codecs.open(file_name, 'w', encoding='utf8') as f:
            f.write(json.dumps(
                self.data,
                ensure_ascii=False,
                indent=2,
                separators=(',', ': ')
            ))

    def _get_image_properties(self, image):
        return {
            'height': int(image['Height']),
            'width': int(image['Width']),
            'url': str(image['URL']),
        }

    def _get_asin_list(self, items):
        for item in items:
            yield item['asin']

    def _build_result(self, query_result):
        """
        Yet try to build a clean dictionnary, still may having some errors
        """
        for i, product in enumerate(query_result):
            res = {
                'images': []
            }
            for prop in PRODUCT_PROPERTIES:
                if isinstance(getattr(product, prop), StringElement):
                    res[prop] = str(getattr(product, prop))
                else:
                    res[prop] = getattr(product, prop)

            for img in product.images:
                res['images'].append({
                    'small_image':
                        self._get_image_properties(img.SmallImage) if hasattr(img, 'SmallImage') else None,
                    'hires_image':
                        self._get_image_properties(img.HiResImage) if hasattr(img, 'HiResImage') else None,
                    'tiny_image':
                        self._get_image_properties(img.TinyImage) if hasattr(img, 'TinyImage') else None,
                    'large_image':
                        self._get_image_properties(img.LargeImage) if hasattr(img, 'LargeImage') else None,
                    'swatch_image':
                        self._get_image_properties(img.SwatchImage) if hasattr(img, 'SwatchImage') else None,
                    'medium_image':
                        self._get_image_properties(img.MediumImage) if hasattr(img, 'MediumImage') else None,
                    'thumbnail_image':
                        self._get_image_properties(img.ThumbnailImage) if hasattr(img, 'ThumbnailImage') else None,
                })

            res['voon_id'] = i + 1
            self.data.append(res)

    def cleanup(self):
        with codecs.open(self.args['file'], 'r') as f:
            items = json.load(f)

        removed = len(items)

        for item in items:
            if item['voon_id'] not in self.args['ids']:
                removed -= 1
                self.data.append(item)
                # items.remove(item)

        self._create_file(self.args['file'])
        print('Done. File cleaned. {} item(s) removed.'.format(removed))

    def update(self):
        self._init_amazon_api()
        real_result = []

        with codecs.open(self.args['file'], 'r') as f:
            aisn_list = list(self._get_asin_list(json.loads(f.read())))
            splitted_aisn = list(self._chunks(aisn_list, 10))

        for l in splitted_aisn:
            result = self.amazon.lookup(ItemId=','.join(l))
            real_result += result

        self._build_result(real_result)
        self._create_file(self.args['file'])

    def catch(self):
        self._init_amazon_api()

        if self.args['limit']:
            result = self.amazon.search_n(
                self.args['limit'],
                Keywords=self.args['query'],
                SearchIndex=self.args['category']
            )
        else:
            result = self.amazon.search(Keywords=self.args['query'], SearchIndex=self.args['category'])

        self._build_result(result)

        custom_slugify = Slugify(to_lower=True)
        custom_slugify.separator = '_'

        fname = '{}_{}.json'.format(
            self.args['prefix'].lower(),
            custom_slugify(self.args['query'])
        )
        self._create_file(fname)


class VoonException(Exception):
    pass


def parse_cli():
    p = argparse.ArgumentParser(description='Voon is a tool to create Amazon products JSON files')
    s = p.add_subparsers(help='Action', dest='action')

    # update
    arg_update = s.add_parser('update', help='Update items in a Voon json file')

    arg_update.add_argument(
        'file',
        type=str,
        nargs='?',
        help='The absolute path of the file that you want to update'
    )

    arg_update.add_argument(
        '--region',
        type=str,
        default='US',
        nargs='?',
        help='Amazon region'
    )


    # cleanup
    arg_cleanup = s.add_parser('cleanup', help='Clean unwanted items from a given json file')

    arg_cleanup.add_argument(
        'file',
        type=str,
        nargs='?',
        help='The absolute path of the file that you want to clean'
    )

    arg_cleanup.add_argument(
        '--ids',
        type=int,
        nargs='+',
        help='Amazon region. Can be'
    )

    # inspect
    arg_inspect = s.add_parser('inspect', help='Inpect a given file in a webview to sort it more easly')

    arg_inspect.add_argument(
        'file',
        type=str,
        nargs='?',
        help='The absolute path of the file that you want to inspect'
    )

    # catch
    arg_catch = s.add_parser('catch', help='Gather the requested products')

    arg_catch.add_argument(
        '--region',
        type=str,
        default='US',
        nargs='?',
        help='Amazon region'
    )

    arg_catch.add_argument(
        '--prefix',
        type=str,
        default='voon',
        nargs='?',
        help='file prefix'
    )

    arg_catch.add_argument(
        '--limit',
        type=int,
        default=0,
        nargs='?',
        help='Limit products in result, if set to 0 there is no limit'
    )

    arg_catch.add_argument(
        '--category',
        type=str,
        default='All',
        nargs='?',
        help='Default is All - Available categories : {}.'.format(', '.join(VALID_SEARCH_INDEX))
    )

    arg_catch.add_argument(
        'query',
        type=str,
        nargs='?',
        help='What do you want to search ?'
    )

    arg_catch.add_argument(
        'directory',
        type=str,
        default='.',
        nargs='?',
        help='Directory to create the file (defaults to current directory)'
    )

    r = p.parse_args()

    if r.action is None:
        p.print_help()
        sys.exit(1)

    return r


class VoonServerThread(threading.Thread):

    def __init__(self, ip, port):
        super().__init__()
        self.ip = ip
        self.port = port
        self.httpd = None

    def run(self):
        os.chdir(os.path.abspath('/'))
        server_address = (self.ip, self.port)
        handler = SimpleHTTPRequestHandler
        socketserver.TCPServer.allow_reuse_address = True
        self.httpd = socketserver.TCPServer(server_address, handler)
        self.httpd.serve_forever()


def do_cleanup(**parsed):
    voon = Voon(parsed)
    voon.cleanup()


def do_update(**parsed):
    voon = Voon(parsed)
    voon.update()


def do_catch(**parsed):
    region_options = bottlenose.api.SERVICE_DOMAINS.keys()

    if parsed['category'] not in VALID_SEARCH_INDEX:
        raise VoonException('Invalid category, available categories are {}'.format(
            ', '.join(VALID_SEARCH_INDEX)
        ))

    if parsed['region'] not in region_options:
        raise VoonException('Invalid region, available regions are {}'.format(
            ', '.join(region_options)
        ))

    if parsed['query'] is None:
        raise VoonException('Argument query is required')

    voon = Voon(parsed)
    voon.catch()


def do_inspect(**parsed):
    try:
        current_dir = os.getcwd() # Warning, the server will start at '/'
        srv_url = 'http://{}:{}'.format(parsed['ip'], parsed['port'])
        parsed['srv'].start()
        print('Server running at {}'.format(srv_url))
        webbrowser.open_new_tab('http://{}:{}/{}?data={}&file={}'.format(
            parsed['ip'],
            parsed['port'],
            '{}/voon_webview/index.html'.format(current_dir),
            '{}/{}'.format(srv_url, parsed['file']),
            parsed['file']
        ))
        parsed['srv'].join()

    except KeyboardInterrupt:
        print('\nClosing webserver... please wait.')
        parsed['srv'].httpd.shutdown()
        sys.exit(1)


def main():
    parsed = vars(parse_cli())
    action = parsed.pop('action')


    if action == 'inspect':
        parsed['ip'] = '127.0.0.1'
        parsed['port'] = 8001
        parsed['srv'] = VoonServerThread(parsed['ip'], parsed['port'])

    try:
        globals()['do_{}'.format(action)](**parsed)
    except KeyboardInterrupt:
        if action == 'inspect':
            parsed['srv'].httpd.shutdown()

        print('see you soon')
        sys.exit(1)


if __name__ == '__main__':
    main()
